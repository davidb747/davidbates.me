영어단어장 프로그램을 작성해보자.
1. 지난 단어장을 수정하여 save라는 명령을 입력하면 wordbook.txt 단어를 저장
2. 프로그램을 재시작할 때 wordbook.txt에서 단어를 읽어와 메모리에 저장


1. 스레드(Thread)

프로세스
- 윈도우 작업 관리자에서 프로세스 탭에 올라와 있는 어플리케이션 하나
- 운영체제로부터 필요한 메모리를 할당받아 어플리케이션 코드를 실행

멀티 태스킹
- 두가지 이상의 작업을 동시(병렬작업)에 처리하는 것

스레드
- 하나의 프로세스 내부에서 독립적으로 실행되는 작업단위
- 운영채재애 의해 관리되는 하나의 작업 혹은 Task를 의미
- 다중 스레드 작업시에는 각 스레드끼리 정보를 주고 받을 수 있어 처리 과정의 오류를 즐일 수 있음
- 각 프로세스는 서로 정보를 주고 받을 수 없음
- JVM에 의해 하나의 프로세스가 발생, main() 안에 실행문들이 하나의 스레드

멀티 스레드
- 여러 스레드를 동시에 실행시키는 응용프로그램을 작성하는 기법
- 메모리 공유로 인한 시스템 자원 소모가 줄어듬
- 동시에 두가지 이상의 활용이 가능
- 서로 자원을 소모하다가 충돌이 일어날 가능성이 있음
- 코드가 난해해질 가능성이 있음

스레드 생성 방법 1 (Thread 클래스 상속)

    public class 클래스명 extends Thread {
        public void run(){
        스레드 객체가 start() 허출하면 실행될 문장;
        // 스레드는 start를 해야 호출이 가능하다.
        ...
        }
    }

    Thread 참조변수 = new 클래스명();
    참조변수.start();

✔ Thread 클래스는 start() 실행시 run() 메소드가 수행되도록 내부적으로 처리


스레드 생성 방법 2 (Runnable 인터페이스 구현)

    public class 클래스명 implements Runnable{
        public void run(){
         스레드 객체가 start() 허출하면 실행될 문장;
         ...
        }
    }

    Runnable 참조변수1 = new 클래스명();
    Thread 참조변수2 = new Thread(참조변수1);
    참조변수2.start();

동기화(Synchronized)
- 멀티 스레드 프로세스에서는 다른 스레드의 작업에 영향을 미칠 수 있기 때문에 진행중인 작업이 다른
스레드레 간섭을 받지 않게 동기화가 필요

    메소드
    public synchronized 반환형 메소드명(매개변수1. 매개변수2 ..) {
        ...
    }

    문장
    synchronized(this){

    }


join()
- 스레드는 메인스레드가 종료되어도 다른 스레드는 백그라운드에서 동작하며 종료되지 않음
- join을 이용하면 다른 스레드가 종료될 때까지 메인스레드가 기다림

스레드 우선순위
- 스레드가 여러개인 경우 우선순위가 높은 스레드가 제어권을 많이 가지게 됨
- 으선순위는 1 ~ 10까지 int값으로 할당
- 기본 우선순위는 5
- 우선순위가 높은 스레드는 실행기회가 많이 주어짐

    MAX_PRIORITY : 가장 높은 순위, 10
    NORM_PRIORITY : 일반적인 순위, 5
    MIN_PRIORITY : 가장 낮은 순위, 1

yield()
- 다른 쓰레드에 자원사용율을 양보할 때 사용
- 우선순위가 낮은 스레드에게 다른 스레드가 해당 자원을 양보



wait()
- 시간 값을 넣으면 주어진 시간 이후에 실행대기 상태로 전환
- 시간값을 넣지 않으면 일시정지

notify()
- wait()로 일시정지 중인 스레드 1개를 실행대기 상태로 전환

notifyAll()
- wait()로 일시정지 중인 모든 스래드를 실행대기 상태로 전환

과제.
공격과 방어를 하는 프로그램을 작성해보자.
(단, 스레드르 사용)
1. 공격 class 생성
2. 방어 class 생성
3. 공격을 하지 않았는데 방어를 할 수 없음
4. 방어를 하지 않았는데 공격을 또 할 수 없음

1번째 공격
1번째 방어
2번째 공격
2번째 방어
...
10번째 공격
10번째 방어














